// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package signcoordinatorrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignCoordinatorClient is the client API for SignCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignCoordinatorClient interface {
	// SignCoordinatorStreams dispatches a bi-directional streaming RPC in which
	// OpenChannel requests are sent to the client and the client responds with
	// a boolean that tells LND whether or not to accept the channel. This allows
	// node operators to specify their own criteria for accepting inbound channels
	// through a single persistent connection.
	SignCoordinatorStreams(ctx context.Context, opts ...grpc.CallOption) (SignCoordinator_SignCoordinatorStreamsClient, error)
}

type signCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSignCoordinatorClient(cc grpc.ClientConnInterface) SignCoordinatorClient {
	return &signCoordinatorClient{cc}
}

func (c *signCoordinatorClient) SignCoordinatorStreams(ctx context.Context, opts ...grpc.CallOption) (SignCoordinator_SignCoordinatorStreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignCoordinator_ServiceDesc.Streams[0], "/signcoordinatorrpc.SignCoordinator/SignCoordinatorStreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &signCoordinatorSignCoordinatorStreamsClient{stream}
	return x, nil
}

type SignCoordinator_SignCoordinatorStreamsClient interface {
	Send(*SignCoordinatorRequest) error
	Recv() (*SignCoordinatorResponse, error)
	grpc.ClientStream
}

type signCoordinatorSignCoordinatorStreamsClient struct {
	grpc.ClientStream
}

func (x *signCoordinatorSignCoordinatorStreamsClient) Send(m *SignCoordinatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signCoordinatorSignCoordinatorStreamsClient) Recv() (*SignCoordinatorResponse, error) {
	m := new(SignCoordinatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignCoordinatorServer is the server API for SignCoordinator service.
// All implementations must embed UnimplementedSignCoordinatorServer
// for forward compatibility
type SignCoordinatorServer interface {
	// SignCoordinatorStreams dispatches a bi-directional streaming RPC in which
	// OpenChannel requests are sent to the client and the client responds with
	// a boolean that tells LND whether or not to accept the channel. This allows
	// node operators to specify their own criteria for accepting inbound channels
	// through a single persistent connection.
	SignCoordinatorStreams(SignCoordinator_SignCoordinatorStreamsServer) error
	mustEmbedUnimplementedSignCoordinatorServer()
}

// UnimplementedSignCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedSignCoordinatorServer struct {
}

func (UnimplementedSignCoordinatorServer) SignCoordinatorStreams(SignCoordinator_SignCoordinatorStreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method SignCoordinatorStreams not implemented")
}
func (UnimplementedSignCoordinatorServer) mustEmbedUnimplementedSignCoordinatorServer() {}

// UnsafeSignCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignCoordinatorServer will
// result in compilation errors.
type UnsafeSignCoordinatorServer interface {
	mustEmbedUnimplementedSignCoordinatorServer()
}

func RegisterSignCoordinatorServer(s grpc.ServiceRegistrar, srv SignCoordinatorServer) {
	s.RegisterService(&SignCoordinator_ServiceDesc, srv)
}

func _SignCoordinator_SignCoordinatorStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignCoordinatorServer).SignCoordinatorStreams(&signCoordinatorSignCoordinatorStreamsServer{stream})
}

type SignCoordinator_SignCoordinatorStreamsServer interface {
	Send(*SignCoordinatorResponse) error
	Recv() (*SignCoordinatorRequest, error)
	grpc.ServerStream
}

type signCoordinatorSignCoordinatorStreamsServer struct {
	grpc.ServerStream
}

func (x *signCoordinatorSignCoordinatorStreamsServer) Send(m *SignCoordinatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signCoordinatorSignCoordinatorStreamsServer) Recv() (*SignCoordinatorRequest, error) {
	m := new(SignCoordinatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignCoordinator_ServiceDesc is the grpc.ServiceDesc for SignCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signcoordinatorrpc.SignCoordinator",
	HandlerType: (*SignCoordinatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignCoordinatorStreams",
			Handler:       _SignCoordinator_SignCoordinatorStreams_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "signcoordinatorrpc/signcoordinator.proto",
}
