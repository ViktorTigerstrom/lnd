// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: signcoordinatorrpc/signcoordinator.proto

package signcoordinatorrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MuSig2Version int32

const (
	// The default value on the RPC is zero for enums so we need to represent an
	// invalid/undefined version by default to make sure clients upgrade their
	// software to set the version explicitly.
	MuSig2Version_MUSIG2_VERSION_UNDEFINED MuSig2Version = 0
	// The version of MuSig2 that lnd 0.15.x shipped with, which corresponds to the
	// version v0.4.0 of the MuSig2 BIP draft.
	MuSig2Version_MUSIG2_VERSION_V040 MuSig2Version = 1
	// The current version of MuSig2 which corresponds to the version v1.0.0rc2 of
	// the MuSig2 BIP draft.
	MuSig2Version_MUSIG2_VERSION_V100RC2 MuSig2Version = 2
)

// Enum value maps for MuSig2Version.
var (
	MuSig2Version_name = map[int32]string{
		0: "MUSIG2_VERSION_UNDEFINED",
		1: "MUSIG2_VERSION_V040",
		2: "MUSIG2_VERSION_V100RC2",
	}
	MuSig2Version_value = map[string]int32{
		"MUSIG2_VERSION_UNDEFINED": 0,
		"MUSIG2_VERSION_V040":      1,
		"MUSIG2_VERSION_V100RC2":   2,
	}
)

func (x MuSig2Version) Enum() *MuSig2Version {
	p := new(MuSig2Version)
	*p = x
	return p
}

func (x MuSig2Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MuSig2Version) Descriptor() protoreflect.EnumDescriptor {
	return file_signcoordinatorrpc_signcoordinator_proto_enumTypes[0].Descriptor()
}

func (MuSig2Version) Type() protoreflect.EnumType {
	return &file_signcoordinatorrpc_signcoordinator_proto_enumTypes[0]
}

func (x MuSig2Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MuSig2Version.Descriptor instead.
func (MuSig2Version) EnumDescriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{0}
}

type SignCoordinatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the original signcoordinator gRPC request. Useful for
	// mapping request to response. For streaming requests, this will be the same
	// ID for all incoming and outgoing middleware intercept messages of the
	// _same_ stream.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// TODO: Add text
	//
	// Types that are assignable to SignRequestType:
	//
	//	*SignCoordinatorRequest_ConnectedRequest
	//	*SignCoordinatorRequest_DeriveSharedKeyRequest
	//	*SignCoordinatorRequest_SignMessageRequest
	//	*SignCoordinatorRequest_MuSig2CreateSessionRequest
	//	*SignCoordinatorRequest_MuSig2RegisterNoncesRequest
	//	*SignCoordinatorRequest_MuSig2SignRequest
	//	*SignCoordinatorRequest_MuSig2CombineSigRequest
	//	*SignCoordinatorRequest_MuSig2CleanupRequest
	//	*SignCoordinatorRequest_SignPsbtRequest
	SignRequestType isSignCoordinatorRequest_SignRequestType `protobuf_oneof:"sign_request_type"`
	// TODO: REMOVE?
	MsgId uint64 `protobuf:"varint,11,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *SignCoordinatorRequest) Reset() {
	*x = SignCoordinatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignCoordinatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignCoordinatorRequest) ProtoMessage() {}

func (x *SignCoordinatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignCoordinatorRequest.ProtoReflect.Descriptor instead.
func (*SignCoordinatorRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{0}
}

func (x *SignCoordinatorRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *SignCoordinatorRequest) GetSignRequestType() isSignCoordinatorRequest_SignRequestType {
	if m != nil {
		return m.SignRequestType
	}
	return nil
}

func (x *SignCoordinatorRequest) GetConnectedRequest() bool {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_ConnectedRequest); ok {
		return x.ConnectedRequest
	}
	return false
}

func (x *SignCoordinatorRequest) GetDeriveSharedKeyRequest() *DeriveSharedKeyRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_DeriveSharedKeyRequest); ok {
		return x.DeriveSharedKeyRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetSignMessageRequest() *SignMessageRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_SignMessageRequest); ok {
		return x.SignMessageRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetMuSig2CreateSessionRequest() *MuSig2CreateSessionRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_MuSig2CreateSessionRequest); ok {
		return x.MuSig2CreateSessionRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetMuSig2RegisterNoncesRequest() *MuSig2RegisterNoncesRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_MuSig2RegisterNoncesRequest); ok {
		return x.MuSig2RegisterNoncesRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetMuSig2SignRequest() *MuSig2SignRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_MuSig2SignRequest); ok {
		return x.MuSig2SignRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetMuSig2CombineSigRequest() *MuSig2CombineSigRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_MuSig2CombineSigRequest); ok {
		return x.MuSig2CombineSigRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetMuSig2CleanupRequest() *MuSig2CleanupRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_MuSig2CleanupRequest); ok {
		return x.MuSig2CleanupRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetSignPsbtRequest() *SignPsbtRequest {
	if x, ok := x.GetSignRequestType().(*SignCoordinatorRequest_SignPsbtRequest); ok {
		return x.SignPsbtRequest
	}
	return nil
}

func (x *SignCoordinatorRequest) GetMsgId() uint64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type isSignCoordinatorRequest_SignRequestType interface {
	isSignCoordinatorRequest_SignRequestType()
}

type SignCoordinatorRequest_ConnectedRequest struct {
	ConnectedRequest bool `protobuf:"varint,2,opt,name=connectedRequest,proto3,oneof"`
}

type SignCoordinatorRequest_DeriveSharedKeyRequest struct {
	DeriveSharedKeyRequest *DeriveSharedKeyRequest `protobuf:"bytes,3,opt,name=deriveSharedKeyRequest,proto3,oneof"`
}

type SignCoordinatorRequest_SignMessageRequest struct {
	SignMessageRequest *SignMessageRequest `protobuf:"bytes,4,opt,name=signMessageRequest,proto3,oneof"`
}

type SignCoordinatorRequest_MuSig2CreateSessionRequest struct {
	MuSig2CreateSessionRequest *MuSig2CreateSessionRequest `protobuf:"bytes,5,opt,name=muSig2CreateSessionRequest,proto3,oneof"`
}

type SignCoordinatorRequest_MuSig2RegisterNoncesRequest struct {
	MuSig2RegisterNoncesRequest *MuSig2RegisterNoncesRequest `protobuf:"bytes,6,opt,name=muSig2RegisterNoncesRequest,proto3,oneof"`
}

type SignCoordinatorRequest_MuSig2SignRequest struct {
	MuSig2SignRequest *MuSig2SignRequest `protobuf:"bytes,7,opt,name=muSig2SignRequest,proto3,oneof"`
}

type SignCoordinatorRequest_MuSig2CombineSigRequest struct {
	MuSig2CombineSigRequest *MuSig2CombineSigRequest `protobuf:"bytes,8,opt,name=muSig2CombineSigRequest,proto3,oneof"`
}

type SignCoordinatorRequest_MuSig2CleanupRequest struct {
	MuSig2CleanupRequest *MuSig2CleanupRequest `protobuf:"bytes,9,opt,name=muSig2CleanupRequest,proto3,oneof"`
}

type SignCoordinatorRequest_SignPsbtRequest struct {
	SignPsbtRequest *SignPsbtRequest `protobuf:"bytes,10,opt,name=signPsbtRequest,proto3,oneof"`
}

func (*SignCoordinatorRequest_ConnectedRequest) isSignCoordinatorRequest_SignRequestType() {}

func (*SignCoordinatorRequest_DeriveSharedKeyRequest) isSignCoordinatorRequest_SignRequestType() {}

func (*SignCoordinatorRequest_SignMessageRequest) isSignCoordinatorRequest_SignRequestType() {}

func (*SignCoordinatorRequest_MuSig2CreateSessionRequest) isSignCoordinatorRequest_SignRequestType() {
}

func (*SignCoordinatorRequest_MuSig2RegisterNoncesRequest) isSignCoordinatorRequest_SignRequestType() {
}

func (*SignCoordinatorRequest_MuSig2SignRequest) isSignCoordinatorRequest_SignRequestType() {}

func (*SignCoordinatorRequest_MuSig2CombineSigRequest) isSignCoordinatorRequest_SignRequestType() {}

func (*SignCoordinatorRequest_MuSig2CleanupRequest) isSignCoordinatorRequest_SignRequestType() {}

func (*SignCoordinatorRequest_SignPsbtRequest) isSignCoordinatorRequest_SignRequestType() {}

type SignCoordinatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the original signcoordinator gRPC request. Useful for
	// mapping request to response. For streaming requests, this will be the same
	// ID for all incoming and outgoing middleware intercept messages of the
	// _same_ stream.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// TODO: ADD TEXT
	//
	// Types that are assignable to SignResponseType:
	//
	//	*SignCoordinatorResponse_ConnectedResponse
	//	*SignCoordinatorResponse_DeriveSharedKeyResponse
	//	*SignCoordinatorResponse_SignMessageResponse
	//	*SignCoordinatorResponse_MuSig2CreateSessionResponse
	//	*SignCoordinatorResponse_MuSig2RegisterNoncesResponse
	//	*SignCoordinatorResponse_MuSig2SignResponse
	//	*SignCoordinatorResponse_MuSig2CombineSigResponse
	//	*SignCoordinatorResponse_MuSig2CleanupResponse
	//	*SignCoordinatorResponse_SignPsbtResponse
	SignResponseType isSignCoordinatorResponse_SignResponseType `protobuf_oneof:"sign_response_type"`
	// TODO: REMOVE?
	MsgId uint64 `protobuf:"varint,11,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *SignCoordinatorResponse) Reset() {
	*x = SignCoordinatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignCoordinatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignCoordinatorResponse) ProtoMessage() {}

func (x *SignCoordinatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignCoordinatorResponse.ProtoReflect.Descriptor instead.
func (*SignCoordinatorResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{1}
}

func (x *SignCoordinatorResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *SignCoordinatorResponse) GetSignResponseType() isSignCoordinatorResponse_SignResponseType {
	if m != nil {
		return m.SignResponseType
	}
	return nil
}

func (x *SignCoordinatorResponse) GetConnectedResponse() bool {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_ConnectedResponse); ok {
		return x.ConnectedResponse
	}
	return false
}

func (x *SignCoordinatorResponse) GetDeriveSharedKeyResponse() *DeriveSharedKeyResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_DeriveSharedKeyResponse); ok {
		return x.DeriveSharedKeyResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetSignMessageResponse() *SignMessageResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_SignMessageResponse); ok {
		return x.SignMessageResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetMuSig2CreateSessionResponse() *MuSig2CreateSessionResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_MuSig2CreateSessionResponse); ok {
		return x.MuSig2CreateSessionResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetMuSig2RegisterNoncesResponse() *MuSig2RegisterNoncesResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_MuSig2RegisterNoncesResponse); ok {
		return x.MuSig2RegisterNoncesResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetMuSig2SignResponse() *MuSig2SignResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_MuSig2SignResponse); ok {
		return x.MuSig2SignResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetMuSig2CombineSigResponse() *MuSig2CombineSigResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_MuSig2CombineSigResponse); ok {
		return x.MuSig2CombineSigResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetMuSig2CleanupResponse() *MuSig2CleanupResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_MuSig2CleanupResponse); ok {
		return x.MuSig2CleanupResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetSignPsbtResponse() *SignPsbtResponse {
	if x, ok := x.GetSignResponseType().(*SignCoordinatorResponse_SignPsbtResponse); ok {
		return x.SignPsbtResponse
	}
	return nil
}

func (x *SignCoordinatorResponse) GetMsgId() uint64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type isSignCoordinatorResponse_SignResponseType interface {
	isSignCoordinatorResponse_SignResponseType()
}

type SignCoordinatorResponse_ConnectedResponse struct {
	ConnectedResponse bool `protobuf:"varint,2,opt,name=connectedResponse,proto3,oneof"`
}

type SignCoordinatorResponse_DeriveSharedKeyResponse struct {
	DeriveSharedKeyResponse *DeriveSharedKeyResponse `protobuf:"bytes,3,opt,name=deriveSharedKeyResponse,proto3,oneof"`
}

type SignCoordinatorResponse_SignMessageResponse struct {
	SignMessageResponse *SignMessageResponse `protobuf:"bytes,4,opt,name=signMessageResponse,proto3,oneof"`
}

type SignCoordinatorResponse_MuSig2CreateSessionResponse struct {
	MuSig2CreateSessionResponse *MuSig2CreateSessionResponse `protobuf:"bytes,5,opt,name=muSig2CreateSessionResponse,proto3,oneof"`
}

type SignCoordinatorResponse_MuSig2RegisterNoncesResponse struct {
	MuSig2RegisterNoncesResponse *MuSig2RegisterNoncesResponse `protobuf:"bytes,6,opt,name=muSig2RegisterNoncesResponse,proto3,oneof"`
}

type SignCoordinatorResponse_MuSig2SignResponse struct {
	MuSig2SignResponse *MuSig2SignResponse `protobuf:"bytes,7,opt,name=muSig2SignResponse,proto3,oneof"`
}

type SignCoordinatorResponse_MuSig2CombineSigResponse struct {
	MuSig2CombineSigResponse *MuSig2CombineSigResponse `protobuf:"bytes,8,opt,name=muSig2CombineSigResponse,proto3,oneof"`
}

type SignCoordinatorResponse_MuSig2CleanupResponse struct {
	MuSig2CleanupResponse *MuSig2CleanupResponse `protobuf:"bytes,9,opt,name=muSig2CleanupResponse,proto3,oneof"`
}

type SignCoordinatorResponse_SignPsbtResponse struct {
	SignPsbtResponse *SignPsbtResponse `protobuf:"bytes,10,opt,name=signPsbtResponse,proto3,oneof"`
}

func (*SignCoordinatorResponse_ConnectedResponse) isSignCoordinatorResponse_SignResponseType() {}

func (*SignCoordinatorResponse_DeriveSharedKeyResponse) isSignCoordinatorResponse_SignResponseType() {
}

func (*SignCoordinatorResponse_SignMessageResponse) isSignCoordinatorResponse_SignResponseType() {}

func (*SignCoordinatorResponse_MuSig2CreateSessionResponse) isSignCoordinatorResponse_SignResponseType() {
}

func (*SignCoordinatorResponse_MuSig2RegisterNoncesResponse) isSignCoordinatorResponse_SignResponseType() {
}

func (*SignCoordinatorResponse_MuSig2SignResponse) isSignCoordinatorResponse_SignResponseType() {}

func (*SignCoordinatorResponse_MuSig2CombineSigResponse) isSignCoordinatorResponse_SignResponseType() {
}

func (*SignCoordinatorResponse_MuSig2CleanupResponse) isSignCoordinatorResponse_SignResponseType() {}

func (*SignCoordinatorResponse_SignPsbtResponse) isSignCoordinatorResponse_SignResponseType() {}

// SharedKeyRequest
type DeriveSharedKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ephemeral public key to use for the DH key derivation.
	EphemeralPubkey []byte `protobuf:"bytes,1,opt,name=ephemeral_pubkey,json=ephemeralPubkey,proto3" json:"ephemeral_pubkey,omitempty"`
	// Deprecated. The optional key locator of the local key that should be used.
	// If this parameter is not set then the node's identity private key will be
	// used.
	//
	// Deprecated: Marked as deprecated in signcoordinatorrpc/signcoordinator.proto.
	KeyLoc *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
	// A key descriptor describes the key used for performing ECDH. Either a key
	// locator or a raw public key is expected, if neither is supplied, defaults to
	// the node's identity private key.
	KeyDesc *KeyDescriptor `protobuf:"bytes,3,opt,name=key_desc,json=keyDesc,proto3" json:"key_desc,omitempty"`
}

func (x *DeriveSharedKeyRequest) Reset() {
	*x = DeriveSharedKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveSharedKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveSharedKeyRequest) ProtoMessage() {}

func (x *DeriveSharedKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveSharedKeyRequest.ProtoReflect.Descriptor instead.
func (*DeriveSharedKeyRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{2}
}

func (x *DeriveSharedKeyRequest) GetEphemeralPubkey() []byte {
	if x != nil {
		return x.EphemeralPubkey
	}
	return nil
}

// Deprecated: Marked as deprecated in signcoordinatorrpc/signcoordinator.proto.
func (x *DeriveSharedKeyRequest) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

func (x *DeriveSharedKeyRequest) GetKeyDesc() *KeyDescriptor {
	if x != nil {
		return x.KeyDesc
	}
	return nil
}

// SharedKeyResponse
type DeriveSharedKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The shared public key, hashed with sha256.
	SharedKey []byte `protobuf:"bytes,1,opt,name=shared_key,json=sharedKey,proto3" json:"shared_key,omitempty"`
}

func (x *DeriveSharedKeyResponse) Reset() {
	*x = DeriveSharedKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveSharedKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveSharedKeyResponse) ProtoMessage() {}

func (x *DeriveSharedKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveSharedKeyResponse.ProtoReflect.Descriptor instead.
func (*DeriveSharedKeyResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{3}
}

func (x *DeriveSharedKeyResponse) GetSharedKey() []byte {
	if x != nil {
		return x.SharedKey
	}
	return nil
}

// SignMessageReq
type SignMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message to be signed. When using REST, this field must be encoded as
	// base64.
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// The key locator that identifies which key to use for signing.
	KeyLoc *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
	// Double-SHA256 hash instead of just the default single round.
	DoubleHash bool `protobuf:"varint,3,opt,name=double_hash,json=doubleHash,proto3" json:"double_hash,omitempty"`
	// Use the compact (pubkey recoverable) format instead of the raw lnwire
	// format. This option cannot be used with Schnorr signatures.
	CompactSig bool `protobuf:"varint,4,opt,name=compact_sig,json=compactSig,proto3" json:"compact_sig,omitempty"`
	// Use Schnorr signature. This option cannot be used with compact format.
	SchnorrSig bool `protobuf:"varint,5,opt,name=schnorr_sig,json=schnorrSig,proto3" json:"schnorr_sig,omitempty"`
	// The optional Taproot tweak bytes to apply to the private key before creating
	// a Schnorr signature. The private key is tweaked as described in BIP-341:
	// privKey + h_tapTweak(internalKey || tapTweak)
	SchnorrSigTapTweak []byte `protobuf:"bytes,6,opt,name=schnorr_sig_tap_tweak,json=schnorrSigTapTweak,proto3" json:"schnorr_sig_tap_tweak,omitempty"`
	// An optional tag that can be provided when taking a tagged hash of a
	// message. This option can only be used when schnorr_sig is true.
	Tag []byte `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SignMessageRequest) Reset() {
	*x = SignMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageRequest) ProtoMessage() {}

func (x *SignMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageRequest.ProtoReflect.Descriptor instead.
func (*SignMessageRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{4}
}

func (x *SignMessageRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SignMessageRequest) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

func (x *SignMessageRequest) GetDoubleHash() bool {
	if x != nil {
		return x.DoubleHash
	}
	return false
}

func (x *SignMessageRequest) GetCompactSig() bool {
	if x != nil {
		return x.CompactSig
	}
	return false
}

func (x *SignMessageRequest) GetSchnorrSig() bool {
	if x != nil {
		return x.SchnorrSig
	}
	return false
}

func (x *SignMessageRequest) GetSchnorrSigTapTweak() []byte {
	if x != nil {
		return x.SchnorrSigTapTweak
	}
	return nil
}

func (x *SignMessageRequest) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

// SignMessageResp
type SignMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signature for the given message in the fixed-size LN wire format.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignMessageResponse) Reset() {
	*x = SignMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageResponse) ProtoMessage() {}

func (x *SignMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageResponse.ProtoReflect.Descriptor instead.
func (*SignMessageResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{5}
}

func (x *SignMessageResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// MuSig2SessionRequest
type MuSig2CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key locator that identifies which key to use for signing.
	KeyLoc *KeyLocator `protobuf:"bytes,1,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
	// A list of all public keys (serialized in 32-byte x-only format for v0.4.0
	// and 33-byte compressed format for v1.0.0rc2!) participating in the signing
	// session. The list will always be sorted lexicographically internally. This
	// must include the local key which is described by the above key_loc.
	AllSignerPubkeys [][]byte `protobuf:"bytes,2,rep,name=all_signer_pubkeys,json=allSignerPubkeys,proto3" json:"all_signer_pubkeys,omitempty"`
	// An optional list of all public nonces of other signing participants that
	// might already be known.
	OtherSignerPublicNonces [][]byte `protobuf:"bytes,3,rep,name=other_signer_public_nonces,json=otherSignerPublicNonces,proto3" json:"other_signer_public_nonces,omitempty"`
	// A series of optional generic tweaks to be applied to the the aggregated
	// public key.
	Tweaks []*TweakDesc `protobuf:"bytes,4,rep,name=tweaks,proto3" json:"tweaks,omitempty"`
	// An optional taproot specific tweak that must be specified if the MuSig2
	// combined key will be used as the main taproot key of a taproot output
	// on-chain.
	TaprootTweak *TaprootTweakDesc `protobuf:"bytes,5,opt,name=taproot_tweak,json=taprootTweak,proto3" json:"taproot_tweak,omitempty"`
	// The mandatory version of the MuSig2 BIP draft to use. This is necessary to
	// differentiate between the changes that were made to the BIP while this
	// experimental RPC was already released. Some of those changes affect how the
	// combined key and nonces are created.
	Version MuSig2Version `protobuf:"varint,6,opt,name=version,proto3,enum=signcoordinatorrpc.MuSig2Version" json:"version,omitempty"`
	// A set of pre generated secret local nonces to use in the musig2 session.
	// This field is optional. This can be useful for protocols that need to send
	// nonces ahead of time before the set of signer keys are known. This value
	// MUST be 97 bytes and be the concatenation of two CSPRNG generated 32 byte
	// values and local public key used for signing as specified in the key_loc
	// field.
	PregeneratedLocalNonce []byte `protobuf:"bytes,7,opt,name=pregenerated_local_nonce,json=pregeneratedLocalNonce,proto3" json:"pregenerated_local_nonce,omitempty"`
}

func (x *MuSig2CreateSessionRequest) Reset() {
	*x = MuSig2CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2CreateSessionRequest) ProtoMessage() {}

func (x *MuSig2CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*MuSig2CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{6}
}

func (x *MuSig2CreateSessionRequest) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

func (x *MuSig2CreateSessionRequest) GetAllSignerPubkeys() [][]byte {
	if x != nil {
		return x.AllSignerPubkeys
	}
	return nil
}

func (x *MuSig2CreateSessionRequest) GetOtherSignerPublicNonces() [][]byte {
	if x != nil {
		return x.OtherSignerPublicNonces
	}
	return nil
}

func (x *MuSig2CreateSessionRequest) GetTweaks() []*TweakDesc {
	if x != nil {
		return x.Tweaks
	}
	return nil
}

func (x *MuSig2CreateSessionRequest) GetTaprootTweak() *TaprootTweakDesc {
	if x != nil {
		return x.TaprootTweak
	}
	return nil
}

func (x *MuSig2CreateSessionRequest) GetVersion() MuSig2Version {
	if x != nil {
		return x.Version
	}
	return MuSig2Version_MUSIG2_VERSION_UNDEFINED
}

func (x *MuSig2CreateSessionRequest) GetPregeneratedLocalNonce() []byte {
	if x != nil {
		return x.PregeneratedLocalNonce
	}
	return nil
}

// MuSig2SessionResponse
type MuSig2CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID that represents this signing session. A session can be used
	// for producing a signature a single time. If the signing fails for any
	// reason, a new session with the same participants needs to be created.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The combined public key (in the 32-byte x-only format) with all tweaks
	// applied to it. If a taproot tweak is specified, this corresponds to the
	// taproot key that can be put into the on-chain output.
	CombinedKey []byte `protobuf:"bytes,2,opt,name=combined_key,json=combinedKey,proto3" json:"combined_key,omitempty"`
	// The raw combined public key (in the 32-byte x-only format) before any tweaks
	// are applied to it. If a taproot tweak is specified, this corresponds to the
	// internal key that needs to be put into the witness if the script spend path
	// is used.
	TaprootInternalKey []byte `protobuf:"bytes,3,opt,name=taproot_internal_key,json=taprootInternalKey,proto3" json:"taproot_internal_key,omitempty"`
	// The two public nonces the local signer uses, combined into a single value
	// of 66 bytes. Can be split into the two 33-byte points to get the individual
	// nonces.
	LocalPublicNonces []byte `protobuf:"bytes,4,opt,name=local_public_nonces,json=localPublicNonces,proto3" json:"local_public_nonces,omitempty"`
	// Indicates whether all nonces required to start the signing process are known
	// now.
	HaveAllNonces bool `protobuf:"varint,5,opt,name=have_all_nonces,json=haveAllNonces,proto3" json:"have_all_nonces,omitempty"`
	// The version of the MuSig2 BIP that was used to create the session.
	Version MuSig2Version `protobuf:"varint,6,opt,name=version,proto3,enum=signcoordinatorrpc.MuSig2Version" json:"version,omitempty"`
}

func (x *MuSig2CreateSessionResponse) Reset() {
	*x = MuSig2CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2CreateSessionResponse) ProtoMessage() {}

func (x *MuSig2CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*MuSig2CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{7}
}

func (x *MuSig2CreateSessionResponse) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *MuSig2CreateSessionResponse) GetCombinedKey() []byte {
	if x != nil {
		return x.CombinedKey
	}
	return nil
}

func (x *MuSig2CreateSessionResponse) GetTaprootInternalKey() []byte {
	if x != nil {
		return x.TaprootInternalKey
	}
	return nil
}

func (x *MuSig2CreateSessionResponse) GetLocalPublicNonces() []byte {
	if x != nil {
		return x.LocalPublicNonces
	}
	return nil
}

func (x *MuSig2CreateSessionResponse) GetHaveAllNonces() bool {
	if x != nil {
		return x.HaveAllNonces
	}
	return false
}

func (x *MuSig2CreateSessionResponse) GetVersion() MuSig2Version {
	if x != nil {
		return x.Version
	}
	return MuSig2Version_MUSIG2_VERSION_UNDEFINED
}

// MuSig2RegisterNoncesRequest
type MuSig2RegisterNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the signing session those nonces should be registered with.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// A list of all public nonces of other signing participants that should be
	// registered.
	OtherSignerPublicNonces [][]byte `protobuf:"bytes,3,rep,name=other_signer_public_nonces,json=otherSignerPublicNonces,proto3" json:"other_signer_public_nonces,omitempty"`
}

func (x *MuSig2RegisterNoncesRequest) Reset() {
	*x = MuSig2RegisterNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2RegisterNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2RegisterNoncesRequest) ProtoMessage() {}

func (x *MuSig2RegisterNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2RegisterNoncesRequest.ProtoReflect.Descriptor instead.
func (*MuSig2RegisterNoncesRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{8}
}

func (x *MuSig2RegisterNoncesRequest) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *MuSig2RegisterNoncesRequest) GetOtherSignerPublicNonces() [][]byte {
	if x != nil {
		return x.OtherSignerPublicNonces
	}
	return nil
}

// MuSig2RegisterNoncesResponse
type MuSig2RegisterNoncesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether all nonces required to start the signing process are known
	// now.
	HaveAllNonces bool `protobuf:"varint,1,opt,name=have_all_nonces,json=haveAllNonces,proto3" json:"have_all_nonces,omitempty"`
}

func (x *MuSig2RegisterNoncesResponse) Reset() {
	*x = MuSig2RegisterNoncesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2RegisterNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2RegisterNoncesResponse) ProtoMessage() {}

func (x *MuSig2RegisterNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2RegisterNoncesResponse.ProtoReflect.Descriptor instead.
func (*MuSig2RegisterNoncesResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{9}
}

func (x *MuSig2RegisterNoncesResponse) GetHaveAllNonces() bool {
	if x != nil {
		return x.HaveAllNonces
	}
	return false
}

// MuSig2SignRequest
type MuSig2SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the signing session to use for signing.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The 32-byte SHA256 digest of the message to sign.
	MessageDigest []byte `protobuf:"bytes,2,opt,name=message_digest,json=messageDigest,proto3" json:"message_digest,omitempty"`
	// Cleanup indicates that after signing, the session state can be cleaned up,
	// since another participant is going to be responsible for combining the
	// partial signatures.
	Cleanup bool `protobuf:"varint,3,opt,name=cleanup,proto3" json:"cleanup,omitempty"`
}

func (x *MuSig2SignRequest) Reset() {
	*x = MuSig2SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2SignRequest) ProtoMessage() {}

func (x *MuSig2SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2SignRequest.ProtoReflect.Descriptor instead.
func (*MuSig2SignRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{10}
}

func (x *MuSig2SignRequest) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *MuSig2SignRequest) GetMessageDigest() []byte {
	if x != nil {
		return x.MessageDigest
	}
	return nil
}

func (x *MuSig2SignRequest) GetCleanup() bool {
	if x != nil {
		return x.Cleanup
	}
	return false
}

// MuSig2SignResponse
type MuSig2SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partial signature created by the local signer.
	LocalPartialSignature []byte `protobuf:"bytes,1,opt,name=local_partial_signature,json=localPartialSignature,proto3" json:"local_partial_signature,omitempty"`
}

func (x *MuSig2SignResponse) Reset() {
	*x = MuSig2SignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2SignResponse) ProtoMessage() {}

func (x *MuSig2SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2SignResponse.ProtoReflect.Descriptor instead.
func (*MuSig2SignResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{11}
}

func (x *MuSig2SignResponse) GetLocalPartialSignature() []byte {
	if x != nil {
		return x.LocalPartialSignature
	}
	return nil
}

// MuSig2CombineSigRequest
type MuSig2CombineSigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the signing session to combine the signatures for.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The list of all other participants' partial signatures to add to the current
	// session.
	OtherPartialSignatures [][]byte `protobuf:"bytes,2,rep,name=other_partial_signatures,json=otherPartialSignatures,proto3" json:"other_partial_signatures,omitempty"`
}

func (x *MuSig2CombineSigRequest) Reset() {
	*x = MuSig2CombineSigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2CombineSigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2CombineSigRequest) ProtoMessage() {}

func (x *MuSig2CombineSigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2CombineSigRequest.ProtoReflect.Descriptor instead.
func (*MuSig2CombineSigRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{12}
}

func (x *MuSig2CombineSigRequest) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *MuSig2CombineSigRequest) GetOtherPartialSignatures() [][]byte {
	if x != nil {
		return x.OtherPartialSignatures
	}
	return nil
}

// MuSig2CombineSigResponse
type MuSig2CombineSigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether all partial signatures required to create a final, full
	// signature are known yet. If this is true, then the final_signature field is
	// set, otherwise it is empty.
	HaveAllSignatures bool `protobuf:"varint,1,opt,name=have_all_signatures,json=haveAllSignatures,proto3" json:"have_all_signatures,omitempty"`
	// The final, full signature that is valid for the combined public key.
	FinalSignature []byte `protobuf:"bytes,2,opt,name=final_signature,json=finalSignature,proto3" json:"final_signature,omitempty"`
}

func (x *MuSig2CombineSigResponse) Reset() {
	*x = MuSig2CombineSigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2CombineSigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2CombineSigResponse) ProtoMessage() {}

func (x *MuSig2CombineSigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2CombineSigResponse.ProtoReflect.Descriptor instead.
func (*MuSig2CombineSigResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{13}
}

func (x *MuSig2CombineSigResponse) GetHaveAllSignatures() bool {
	if x != nil {
		return x.HaveAllSignatures
	}
	return false
}

func (x *MuSig2CombineSigResponse) GetFinalSignature() []byte {
	if x != nil {
		return x.FinalSignature
	}
	return nil
}

// MuSig2CleanupRequest
type MuSig2CleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the signing session that should be removed/cleaned up.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *MuSig2CleanupRequest) Reset() {
	*x = MuSig2CleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2CleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2CleanupRequest) ProtoMessage() {}

func (x *MuSig2CleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2CleanupRequest.ProtoReflect.Descriptor instead.
func (*MuSig2CleanupRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{14}
}

func (x *MuSig2CleanupRequest) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

// MuSig2CleanupResponse
type MuSig2CleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MuSig2CleanupResponse) Reset() {
	*x = MuSig2CleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuSig2CleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuSig2CleanupResponse) ProtoMessage() {}

func (x *MuSig2CleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuSig2CleanupResponse.ProtoReflect.Descriptor instead.
func (*MuSig2CleanupResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{15}
}

// Walletkit SignPsbtRequest
type SignPsbtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The PSBT that should be signed. The PSBT must contain all required inputs,
	// outputs, UTXO data and custom fields required to identify the signing key.
	FundedPsbt []byte `protobuf:"bytes,1,opt,name=funded_psbt,json=fundedPsbt,proto3" json:"funded_psbt,omitempty"`
}

func (x *SignPsbtRequest) Reset() {
	*x = SignPsbtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPsbtRequest) ProtoMessage() {}

func (x *SignPsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPsbtRequest.ProtoReflect.Descriptor instead.
func (*SignPsbtRequest) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{16}
}

func (x *SignPsbtRequest) GetFundedPsbt() []byte {
	if x != nil {
		return x.FundedPsbt
	}
	return nil
}

// Walletkit SignPsbtResponse
type SignPsbtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signed transaction in PSBT format.
	SignedPsbt []byte `protobuf:"bytes,1,opt,name=signed_psbt,json=signedPsbt,proto3" json:"signed_psbt,omitempty"`
	// The indices of signed inputs.
	SignedInputs []uint32 `protobuf:"varint,2,rep,packed,name=signed_inputs,json=signedInputs,proto3" json:"signed_inputs,omitempty"`
}

func (x *SignPsbtResponse) Reset() {
	*x = SignPsbtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPsbtResponse) ProtoMessage() {}

func (x *SignPsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPsbtResponse.ProtoReflect.Descriptor instead.
func (*SignPsbtResponse) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{17}
}

func (x *SignPsbtResponse) GetSignedPsbt() []byte {
	if x != nil {
		return x.SignedPsbt
	}
	return nil
}

func (x *SignPsbtResponse) GetSignedInputs() []uint32 {
	if x != nil {
		return x.SignedInputs
	}
	return nil
}

type KeyLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The family of key being identified.
	KeyFamily int32 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	// The precise index of the key being identified.
	KeyIndex int32 `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
}

func (x *KeyLocator) Reset() {
	*x = KeyLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyLocator) ProtoMessage() {}

func (x *KeyLocator) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyLocator.ProtoReflect.Descriptor instead.
func (*KeyLocator) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{18}
}

func (x *KeyLocator) GetKeyFamily() int32 {
	if x != nil {
		return x.KeyFamily
	}
	return 0
}

func (x *KeyLocator) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type KeyDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw bytes of the key being identified.
	RawKeyBytes []byte `protobuf:"bytes,1,opt,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
	// The key locator that identifies which key to use for signing.
	KeyLoc *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
}

func (x *KeyDescriptor) Reset() {
	*x = KeyDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDescriptor) ProtoMessage() {}

func (x *KeyDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDescriptor.ProtoReflect.Descriptor instead.
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{19}
}

func (x *KeyDescriptor) GetRawKeyBytes() []byte {
	if x != nil {
		return x.RawKeyBytes
	}
	return nil
}

func (x *KeyDescriptor) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

type TweakDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tweak is the 32-byte value that will modify the public key.
	Tweak []byte `protobuf:"bytes,1,opt,name=tweak,proto3" json:"tweak,omitempty"`
	// Specifies if the target key should be converted to an x-only public key
	// before tweaking. If true, then the public key will be mapped to an x-only
	// key before the tweaking operation is applied.
	IsXOnly bool `protobuf:"varint,2,opt,name=is_x_only,json=isXOnly,proto3" json:"is_x_only,omitempty"`
}

func (x *TweakDesc) Reset() {
	*x = TweakDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweakDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweakDesc) ProtoMessage() {}

func (x *TweakDesc) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweakDesc.ProtoReflect.Descriptor instead.
func (*TweakDesc) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{20}
}

func (x *TweakDesc) GetTweak() []byte {
	if x != nil {
		return x.Tweak
	}
	return nil
}

func (x *TweakDesc) GetIsXOnly() bool {
	if x != nil {
		return x.IsXOnly
	}
	return false
}

type TaprootTweakDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root hash of the tapscript tree if a script path is committed to. If
	// the MuSig2 key put on chain doesn't also commit to a script path (BIP-0086
	// key spend only), then this needs to be empty and the key_spend_only field
	// below must be set to true. This is required because gRPC cannot
	// differentiate between a zero-size byte slice and a nil byte slice (both
	// would be serialized the same way). So the extra boolean is required.
	ScriptRoot []byte `protobuf:"bytes,1,opt,name=script_root,json=scriptRoot,proto3" json:"script_root,omitempty"`
	// Indicates that the above script_root is expected to be empty because this
	// is a BIP-0086 key spend only commitment where only the internal key is
	// committed to instead of also including a script root hash.
	KeySpendOnly bool `protobuf:"varint,2,opt,name=key_spend_only,json=keySpendOnly,proto3" json:"key_spend_only,omitempty"`
}

func (x *TaprootTweakDesc) Reset() {
	*x = TaprootTweakDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaprootTweakDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaprootTweakDesc) ProtoMessage() {}

func (x *TaprootTweakDesc) ProtoReflect() protoreflect.Message {
	mi := &file_signcoordinatorrpc_signcoordinator_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaprootTweakDesc.ProtoReflect.Descriptor instead.
func (*TaprootTweakDesc) Descriptor() ([]byte, []int) {
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP(), []int{21}
}

func (x *TaprootTweakDesc) GetScriptRoot() []byte {
	if x != nil {
		return x.ScriptRoot
	}
	return nil
}

func (x *TaprootTweakDesc) GetKeySpendOnly() bool {
	if x != nil {
		return x.KeySpendOnly
	}
	return false
}

var File_signcoordinatorrpc_signcoordinator_proto protoreflect.FileDescriptor

var file_signcoordinatorrpc_signcoordinator_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x69, 0x67, 0x6e,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x22, 0xa9,
	0x07, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x16, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1a, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x75,
	0x53, 0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x1b, 0x6d, 0x75, 0x53, 0x69,
	0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x1b, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x11, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75,
	0x53, 0x69, 0x67, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67,
	0x32, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a,
	0x14, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x07, 0x0a, 0x17, 0x53,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1b, 0x6d,
	0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x76, 0x0a, 0x1c, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69,
	0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x75, 0x53, 0x69,
	0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x75, 0x53, 0x69,
	0x67, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x18, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x15, 0x6d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x75, 0x53, 0x69,
	0x67, 0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4b,
	0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6b,
	0x65, 0x79, 0x4c, 0x6f, 0x63, 0x12, 0x3c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x22, 0x38, 0x0a, 0x17, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x87, 0x02,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x53,
	0x69, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x5f, 0x74, 0x61, 0x70, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x73, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x53, 0x69, 0x67, 0x54, 0x61, 0x70,
	0x54, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x33, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb9, 0x03, 0x0a,
	0x1a, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6b, 0x65,
	0x79, 0x4c, 0x6f, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x10, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x06, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06,
	0x74, 0x77, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x0c, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x77, 0x65, 0x61,
	0x6b, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x16, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x1b, 0x4d, 0x75, 0x53,
	0x69, 0x67, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x53, 0x69, 0x67,
	0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x79, 0x0a, 0x1b, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x1c,
	0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x22, 0x4c, 0x0a, 0x12, 0x4d, 0x75, 0x53,
	0x69, 0x67, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x72, 0x0a, 0x17, 0x4d, 0x75, 0x53, 0x69, 0x67,
	0x32, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x16, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x18, 0x4d,
	0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x76, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x35, 0x0a, 0x14, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4d, 0x75, 0x53, 0x69, 0x67,
	0x32, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x73,
	0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x73, 0x62, 0x74, 0x22, 0x58, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x62, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x73, 0x62, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x48,
	0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6c, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x61, 0x77, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x22, 0x3d, 0x0a, 0x09, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x78, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x58, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x59, 0x0a, 0x10, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74,
	0x54, 0x77, 0x65, 0x61, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x2a, 0x62, 0x0a, 0x0d, 0x4d, 0x75, 0x53, 0x69, 0x67, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x55, 0x53, 0x49, 0x47, 0x32, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x55, 0x53, 0x49, 0x47, 0x32, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x30, 0x34, 0x30, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x55, 0x53, 0x49,
	0x47, 0x32, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x30, 0x30, 0x52,
	0x43, 0x32, 0x10, 0x02, 0x32, 0x88, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6c,
	0x6e, 0x64, 0x2f, 0x6c, 0x6e, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_signcoordinatorrpc_signcoordinator_proto_rawDescOnce sync.Once
	file_signcoordinatorrpc_signcoordinator_proto_rawDescData = file_signcoordinatorrpc_signcoordinator_proto_rawDesc
)

func file_signcoordinatorrpc_signcoordinator_proto_rawDescGZIP() []byte {
	file_signcoordinatorrpc_signcoordinator_proto_rawDescOnce.Do(func() {
		file_signcoordinatorrpc_signcoordinator_proto_rawDescData = protoimpl.X.CompressGZIP(file_signcoordinatorrpc_signcoordinator_proto_rawDescData)
	})
	return file_signcoordinatorrpc_signcoordinator_proto_rawDescData
}

var file_signcoordinatorrpc_signcoordinator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_signcoordinatorrpc_signcoordinator_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_signcoordinatorrpc_signcoordinator_proto_goTypes = []interface{}{
	(MuSig2Version)(0),                   // 0: signcoordinatorrpc.MuSig2Version
	(*SignCoordinatorRequest)(nil),       // 1: signcoordinatorrpc.SignCoordinatorRequest
	(*SignCoordinatorResponse)(nil),      // 2: signcoordinatorrpc.SignCoordinatorResponse
	(*DeriveSharedKeyRequest)(nil),       // 3: signcoordinatorrpc.DeriveSharedKeyRequest
	(*DeriveSharedKeyResponse)(nil),      // 4: signcoordinatorrpc.DeriveSharedKeyResponse
	(*SignMessageRequest)(nil),           // 5: signcoordinatorrpc.SignMessageRequest
	(*SignMessageResponse)(nil),          // 6: signcoordinatorrpc.SignMessageResponse
	(*MuSig2CreateSessionRequest)(nil),   // 7: signcoordinatorrpc.MuSig2CreateSessionRequest
	(*MuSig2CreateSessionResponse)(nil),  // 8: signcoordinatorrpc.MuSig2CreateSessionResponse
	(*MuSig2RegisterNoncesRequest)(nil),  // 9: signcoordinatorrpc.MuSig2RegisterNoncesRequest
	(*MuSig2RegisterNoncesResponse)(nil), // 10: signcoordinatorrpc.MuSig2RegisterNoncesResponse
	(*MuSig2SignRequest)(nil),            // 11: signcoordinatorrpc.MuSig2SignRequest
	(*MuSig2SignResponse)(nil),           // 12: signcoordinatorrpc.MuSig2SignResponse
	(*MuSig2CombineSigRequest)(nil),      // 13: signcoordinatorrpc.MuSig2CombineSigRequest
	(*MuSig2CombineSigResponse)(nil),     // 14: signcoordinatorrpc.MuSig2CombineSigResponse
	(*MuSig2CleanupRequest)(nil),         // 15: signcoordinatorrpc.MuSig2CleanupRequest
	(*MuSig2CleanupResponse)(nil),        // 16: signcoordinatorrpc.MuSig2CleanupResponse
	(*SignPsbtRequest)(nil),              // 17: signcoordinatorrpc.SignPsbtRequest
	(*SignPsbtResponse)(nil),             // 18: signcoordinatorrpc.SignPsbtResponse
	(*KeyLocator)(nil),                   // 19: signcoordinatorrpc.KeyLocator
	(*KeyDescriptor)(nil),                // 20: signcoordinatorrpc.KeyDescriptor
	(*TweakDesc)(nil),                    // 21: signcoordinatorrpc.TweakDesc
	(*TaprootTweakDesc)(nil),             // 22: signcoordinatorrpc.TaprootTweakDesc
}
var file_signcoordinatorrpc_signcoordinator_proto_depIdxs = []int32{
	3,  // 0: signcoordinatorrpc.SignCoordinatorRequest.deriveSharedKeyRequest:type_name -> signcoordinatorrpc.DeriveSharedKeyRequest
	5,  // 1: signcoordinatorrpc.SignCoordinatorRequest.signMessageRequest:type_name -> signcoordinatorrpc.SignMessageRequest
	7,  // 2: signcoordinatorrpc.SignCoordinatorRequest.muSig2CreateSessionRequest:type_name -> signcoordinatorrpc.MuSig2CreateSessionRequest
	9,  // 3: signcoordinatorrpc.SignCoordinatorRequest.muSig2RegisterNoncesRequest:type_name -> signcoordinatorrpc.MuSig2RegisterNoncesRequest
	11, // 4: signcoordinatorrpc.SignCoordinatorRequest.muSig2SignRequest:type_name -> signcoordinatorrpc.MuSig2SignRequest
	13, // 5: signcoordinatorrpc.SignCoordinatorRequest.muSig2CombineSigRequest:type_name -> signcoordinatorrpc.MuSig2CombineSigRequest
	15, // 6: signcoordinatorrpc.SignCoordinatorRequest.muSig2CleanupRequest:type_name -> signcoordinatorrpc.MuSig2CleanupRequest
	17, // 7: signcoordinatorrpc.SignCoordinatorRequest.signPsbtRequest:type_name -> signcoordinatorrpc.SignPsbtRequest
	4,  // 8: signcoordinatorrpc.SignCoordinatorResponse.deriveSharedKeyResponse:type_name -> signcoordinatorrpc.DeriveSharedKeyResponse
	6,  // 9: signcoordinatorrpc.SignCoordinatorResponse.signMessageResponse:type_name -> signcoordinatorrpc.SignMessageResponse
	8,  // 10: signcoordinatorrpc.SignCoordinatorResponse.muSig2CreateSessionResponse:type_name -> signcoordinatorrpc.MuSig2CreateSessionResponse
	10, // 11: signcoordinatorrpc.SignCoordinatorResponse.muSig2RegisterNoncesResponse:type_name -> signcoordinatorrpc.MuSig2RegisterNoncesResponse
	12, // 12: signcoordinatorrpc.SignCoordinatorResponse.muSig2SignResponse:type_name -> signcoordinatorrpc.MuSig2SignResponse
	14, // 13: signcoordinatorrpc.SignCoordinatorResponse.muSig2CombineSigResponse:type_name -> signcoordinatorrpc.MuSig2CombineSigResponse
	16, // 14: signcoordinatorrpc.SignCoordinatorResponse.muSig2CleanupResponse:type_name -> signcoordinatorrpc.MuSig2CleanupResponse
	18, // 15: signcoordinatorrpc.SignCoordinatorResponse.signPsbtResponse:type_name -> signcoordinatorrpc.SignPsbtResponse
	19, // 16: signcoordinatorrpc.DeriveSharedKeyRequest.key_loc:type_name -> signcoordinatorrpc.KeyLocator
	20, // 17: signcoordinatorrpc.DeriveSharedKeyRequest.key_desc:type_name -> signcoordinatorrpc.KeyDescriptor
	19, // 18: signcoordinatorrpc.SignMessageRequest.key_loc:type_name -> signcoordinatorrpc.KeyLocator
	19, // 19: signcoordinatorrpc.MuSig2CreateSessionRequest.key_loc:type_name -> signcoordinatorrpc.KeyLocator
	21, // 20: signcoordinatorrpc.MuSig2CreateSessionRequest.tweaks:type_name -> signcoordinatorrpc.TweakDesc
	22, // 21: signcoordinatorrpc.MuSig2CreateSessionRequest.taproot_tweak:type_name -> signcoordinatorrpc.TaprootTweakDesc
	0,  // 22: signcoordinatorrpc.MuSig2CreateSessionRequest.version:type_name -> signcoordinatorrpc.MuSig2Version
	0,  // 23: signcoordinatorrpc.MuSig2CreateSessionResponse.version:type_name -> signcoordinatorrpc.MuSig2Version
	19, // 24: signcoordinatorrpc.KeyDescriptor.key_loc:type_name -> signcoordinatorrpc.KeyLocator
	1,  // 25: signcoordinatorrpc.SignCoordinator.SignCoordinatorStreams:input_type -> signcoordinatorrpc.SignCoordinatorRequest
	2,  // 26: signcoordinatorrpc.SignCoordinator.SignCoordinatorStreams:output_type -> signcoordinatorrpc.SignCoordinatorResponse
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_signcoordinatorrpc_signcoordinator_proto_init() }
func file_signcoordinatorrpc_signcoordinator_proto_init() {
	if File_signcoordinatorrpc_signcoordinator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignCoordinatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignCoordinatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveSharedKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveSharedKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2RegisterNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2RegisterNoncesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2SignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2CombineSigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2CombineSigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2CleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuSig2CleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPsbtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPsbtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweakDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signcoordinatorrpc_signcoordinator_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaprootTweakDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_signcoordinatorrpc_signcoordinator_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SignCoordinatorRequest_ConnectedRequest)(nil),
		(*SignCoordinatorRequest_DeriveSharedKeyRequest)(nil),
		(*SignCoordinatorRequest_SignMessageRequest)(nil),
		(*SignCoordinatorRequest_MuSig2CreateSessionRequest)(nil),
		(*SignCoordinatorRequest_MuSig2RegisterNoncesRequest)(nil),
		(*SignCoordinatorRequest_MuSig2SignRequest)(nil),
		(*SignCoordinatorRequest_MuSig2CombineSigRequest)(nil),
		(*SignCoordinatorRequest_MuSig2CleanupRequest)(nil),
		(*SignCoordinatorRequest_SignPsbtRequest)(nil),
	}
	file_signcoordinatorrpc_signcoordinator_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SignCoordinatorResponse_ConnectedResponse)(nil),
		(*SignCoordinatorResponse_DeriveSharedKeyResponse)(nil),
		(*SignCoordinatorResponse_SignMessageResponse)(nil),
		(*SignCoordinatorResponse_MuSig2CreateSessionResponse)(nil),
		(*SignCoordinatorResponse_MuSig2RegisterNoncesResponse)(nil),
		(*SignCoordinatorResponse_MuSig2SignResponse)(nil),
		(*SignCoordinatorResponse_MuSig2CombineSigResponse)(nil),
		(*SignCoordinatorResponse_MuSig2CleanupResponse)(nil),
		(*SignCoordinatorResponse_SignPsbtResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_signcoordinatorrpc_signcoordinator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_signcoordinatorrpc_signcoordinator_proto_goTypes,
		DependencyIndexes: file_signcoordinatorrpc_signcoordinator_proto_depIdxs,
		EnumInfos:         file_signcoordinatorrpc_signcoordinator_proto_enumTypes,
		MessageInfos:      file_signcoordinatorrpc_signcoordinator_proto_msgTypes,
	}.Build()
	File_signcoordinatorrpc_signcoordinator_proto = out.File
	file_signcoordinatorrpc_signcoordinator_proto_rawDesc = nil
	file_signcoordinatorrpc_signcoordinator_proto_goTypes = nil
	file_signcoordinatorrpc_signcoordinator_proto_depIdxs = nil
}
