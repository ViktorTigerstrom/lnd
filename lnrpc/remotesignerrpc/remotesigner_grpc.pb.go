// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remotesignerrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteSignerClient is the client API for RemoteSigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteSignerClient interface {
	// lncli: `whitelistaddress`
	// WhitelistAddress adds an address to the whitelist. If the address is
	// already whitelisted, this call will fail.
	WhitelistAddress(ctx context.Context, in *WhitelistAddressRequest, opts ...grpc.CallOption) (*WhitelistAddressResp, error)
	// lncli: `whitelistedaddresses`
	// WhitelistedAddresses lists the currently whitelisted addresses.
	WhitelistedAddresses(ctx context.Context, in *WhitelistedAddressesRequest, opts ...grpc.CallOption) (*WhitelistedAddressesResp, error)
	// lncli: `removewhitelistedaddress`
	// RemoveWhitelistedAddress removes an address from the whitelist.
	RemoveWhitelistedAddress(ctx context.Context, in *RemoveWhitelistAddressRequest, opts ...grpc.CallOption) (*RemoveWhitelistAddressResp, error)
	// lncli: `whitelistpaymenthash`
	// WhitelistPaymentHash adds an payment hash to the whitelist. If the payment
	// hash is already whitelisted, this call will fail.
	WhitelistPaymentHash(ctx context.Context, in *WhitelistPaymentHashRequest, opts ...grpc.CallOption) (*WhitelistPaymentHashResp, error)
	// lncli: `whitelistedpaymenthashes`
	// WhitelistedPaymentHashes lists the currently whitelisted payment hashes.
	WhitelistedPaymentHashes(ctx context.Context, in *WhitelistedPaymentHashesRequest, opts ...grpc.CallOption) (*WhitelistedPaymentHashesResp, error)
	// lncli: `removewhitelistedpaymenthash`
	// RemoveWhitelistedPaymentHash removes a payment hash from the whitelist.
	RemoveWhitelistedPaymentHash(ctx context.Context, in *RemoveWhitelistPaymentHashRequest, opts ...grpc.CallOption) (*RemoveWhitelistPaymentHashResp, error)
}

type remoteSignerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteSignerClient(cc grpc.ClientConnInterface) RemoteSignerClient {
	return &remoteSignerClient{cc}
}

func (c *remoteSignerClient) WhitelistAddress(ctx context.Context, in *WhitelistAddressRequest, opts ...grpc.CallOption) (*WhitelistAddressResp, error) {
	out := new(WhitelistAddressResp)
	err := c.cc.Invoke(ctx, "/remotesignerrpc.RemoteSigner/WhitelistAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) WhitelistedAddresses(ctx context.Context, in *WhitelistedAddressesRequest, opts ...grpc.CallOption) (*WhitelistedAddressesResp, error) {
	out := new(WhitelistedAddressesResp)
	err := c.cc.Invoke(ctx, "/remotesignerrpc.RemoteSigner/WhitelistedAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) RemoveWhitelistedAddress(ctx context.Context, in *RemoveWhitelistAddressRequest, opts ...grpc.CallOption) (*RemoveWhitelistAddressResp, error) {
	out := new(RemoveWhitelistAddressResp)
	err := c.cc.Invoke(ctx, "/remotesignerrpc.RemoteSigner/RemoveWhitelistedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) WhitelistPaymentHash(ctx context.Context, in *WhitelistPaymentHashRequest, opts ...grpc.CallOption) (*WhitelistPaymentHashResp, error) {
	out := new(WhitelistPaymentHashResp)
	err := c.cc.Invoke(ctx, "/remotesignerrpc.RemoteSigner/WhitelistPaymentHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) WhitelistedPaymentHashes(ctx context.Context, in *WhitelistedPaymentHashesRequest, opts ...grpc.CallOption) (*WhitelistedPaymentHashesResp, error) {
	out := new(WhitelistedPaymentHashesResp)
	err := c.cc.Invoke(ctx, "/remotesignerrpc.RemoteSigner/WhitelistedPaymentHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) RemoveWhitelistedPaymentHash(ctx context.Context, in *RemoveWhitelistPaymentHashRequest, opts ...grpc.CallOption) (*RemoveWhitelistPaymentHashResp, error) {
	out := new(RemoveWhitelistPaymentHashResp)
	err := c.cc.Invoke(ctx, "/remotesignerrpc.RemoteSigner/RemoveWhitelistedPaymentHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteSignerServer is the server API for RemoteSigner service.
// All implementations must embed UnimplementedRemoteSignerServer
// for forward compatibility
type RemoteSignerServer interface {
	// lncli: `whitelistaddress`
	// WhitelistAddress adds an address to the whitelist. If the address is
	// already whitelisted, this call will fail.
	WhitelistAddress(context.Context, *WhitelistAddressRequest) (*WhitelistAddressResp, error)
	// lncli: `whitelistedaddresses`
	// WhitelistedAddresses lists the currently whitelisted addresses.
	WhitelistedAddresses(context.Context, *WhitelistedAddressesRequest) (*WhitelistedAddressesResp, error)
	// lncli: `removewhitelistedaddress`
	// RemoveWhitelistedAddress removes an address from the whitelist.
	RemoveWhitelistedAddress(context.Context, *RemoveWhitelistAddressRequest) (*RemoveWhitelistAddressResp, error)
	// lncli: `whitelistpaymenthash`
	// WhitelistPaymentHash adds an payment hash to the whitelist. If the payment
	// hash is already whitelisted, this call will fail.
	WhitelistPaymentHash(context.Context, *WhitelistPaymentHashRequest) (*WhitelistPaymentHashResp, error)
	// lncli: `whitelistedpaymenthashes`
	// WhitelistedPaymentHashes lists the currently whitelisted payment hashes.
	WhitelistedPaymentHashes(context.Context, *WhitelistedPaymentHashesRequest) (*WhitelistedPaymentHashesResp, error)
	// lncli: `removewhitelistedpaymenthash`
	// RemoveWhitelistedPaymentHash removes a payment hash from the whitelist.
	RemoveWhitelistedPaymentHash(context.Context, *RemoveWhitelistPaymentHashRequest) (*RemoveWhitelistPaymentHashResp, error)
	mustEmbedUnimplementedRemoteSignerServer()
}

// UnimplementedRemoteSignerServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteSignerServer struct {
}

func (UnimplementedRemoteSignerServer) WhitelistAddress(context.Context, *WhitelistAddressRequest) (*WhitelistAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistAddress not implemented")
}
func (UnimplementedRemoteSignerServer) WhitelistedAddresses(context.Context, *WhitelistedAddressesRequest) (*WhitelistedAddressesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistedAddresses not implemented")
}
func (UnimplementedRemoteSignerServer) RemoveWhitelistedAddress(context.Context, *RemoveWhitelistAddressRequest) (*RemoveWhitelistAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelistedAddress not implemented")
}
func (UnimplementedRemoteSignerServer) WhitelistPaymentHash(context.Context, *WhitelistPaymentHashRequest) (*WhitelistPaymentHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistPaymentHash not implemented")
}
func (UnimplementedRemoteSignerServer) WhitelistedPaymentHashes(context.Context, *WhitelistedPaymentHashesRequest) (*WhitelistedPaymentHashesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistedPaymentHashes not implemented")
}
func (UnimplementedRemoteSignerServer) RemoveWhitelistedPaymentHash(context.Context, *RemoveWhitelistPaymentHashRequest) (*RemoveWhitelistPaymentHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelistedPaymentHash not implemented")
}
func (UnimplementedRemoteSignerServer) mustEmbedUnimplementedRemoteSignerServer() {}

// UnsafeRemoteSignerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteSignerServer will
// result in compilation errors.
type UnsafeRemoteSignerServer interface {
	mustEmbedUnimplementedRemoteSignerServer()
}

func RegisterRemoteSignerServer(s grpc.ServiceRegistrar, srv RemoteSignerServer) {
	s.RegisterService(&RemoteSigner_ServiceDesc, srv)
}

func _RemoteSigner_WhitelistAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).WhitelistAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotesignerrpc.RemoteSigner/WhitelistAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).WhitelistAddress(ctx, req.(*WhitelistAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_WhitelistedAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistedAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).WhitelistedAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotesignerrpc.RemoteSigner/WhitelistedAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).WhitelistedAddresses(ctx, req.(*WhitelistedAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_RemoveWhitelistedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWhitelistAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).RemoveWhitelistedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotesignerrpc.RemoteSigner/RemoveWhitelistedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).RemoveWhitelistedAddress(ctx, req.(*RemoveWhitelistAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_WhitelistPaymentHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistPaymentHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).WhitelistPaymentHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotesignerrpc.RemoteSigner/WhitelistPaymentHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).WhitelistPaymentHash(ctx, req.(*WhitelistPaymentHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_WhitelistedPaymentHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistedPaymentHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).WhitelistedPaymentHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotesignerrpc.RemoteSigner/WhitelistedPaymentHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).WhitelistedPaymentHashes(ctx, req.(*WhitelistedPaymentHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_RemoveWhitelistedPaymentHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWhitelistPaymentHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).RemoveWhitelistedPaymentHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remotesignerrpc.RemoteSigner/RemoveWhitelistedPaymentHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).RemoveWhitelistedPaymentHash(ctx, req.(*RemoveWhitelistPaymentHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteSigner_ServiceDesc is the grpc.ServiceDesc for RemoteSigner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteSigner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remotesignerrpc.RemoteSigner",
	HandlerType: (*RemoteSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhitelistAddress",
			Handler:    _RemoteSigner_WhitelistAddress_Handler,
		},
		{
			MethodName: "WhitelistedAddresses",
			Handler:    _RemoteSigner_WhitelistedAddresses_Handler,
		},
		{
			MethodName: "RemoveWhitelistedAddress",
			Handler:    _RemoteSigner_RemoveWhitelistedAddress_Handler,
		},
		{
			MethodName: "WhitelistPaymentHash",
			Handler:    _RemoteSigner_WhitelistPaymentHash_Handler,
		},
		{
			MethodName: "WhitelistedPaymentHashes",
			Handler:    _RemoteSigner_WhitelistedPaymentHashes_Handler,
		},
		{
			MethodName: "RemoveWhitelistedPaymentHash",
			Handler:    _RemoteSigner_RemoveWhitelistedPaymentHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remotesignerrpc/remotesigner.proto",
}
