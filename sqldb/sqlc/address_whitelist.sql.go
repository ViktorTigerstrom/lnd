// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: address_whitelist.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteWhitelistedAddress = `-- name: DeleteWhitelistedAddress :execresult
DELETE
FROM address_whitelist
WHERE address = $1
`

func (q *Queries) DeleteWhitelistedAddress(ctx context.Context, address string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteWhitelistedAddress, address)
}

const getWhitelistedAddress = `-- name: GetWhitelistedAddress :one
SELECT id, address, amount_msat, created_at
FROM address_whitelist
WHERE address = $1
`

func (q *Queries) GetWhitelistedAddress(ctx context.Context, address string) (AddressWhitelist, error) {
	row := q.db.QueryRowContext(ctx, getWhitelistedAddress, address)
	var i AddressWhitelist
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.AmountMsat,
		&i.CreatedAt,
	)
	return i, err
}

const insertWhitelistedAddress = `-- name: InsertWhitelistedAddress :one
INSERT INTO address_whitelist (
    address, amount_msat, created_at
) VALUES (
    $1, $2, $3
) RETURNING id
`

type InsertWhitelistedAddressParams struct {
	Address    string
	AmountMsat int64
	CreatedAt  time.Time
}

func (q *Queries) InsertWhitelistedAddress(ctx context.Context, arg InsertWhitelistedAddressParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertWhitelistedAddress, arg.Address, arg.AmountMsat, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listWhitelistedAddresses = `-- name: ListWhitelistedAddresses :many
SELECT id, address, amount_msat, created_at
FROM address_whitelist
`

func (q *Queries) ListWhitelistedAddresses(ctx context.Context) ([]AddressWhitelist, error) {
	rows, err := q.db.QueryContext(ctx, listWhitelistedAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddressWhitelist
	for rows.Next() {
		var i AddressWhitelist
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.AmountMsat,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
