// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: remotesigner_local_commitment.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteLocalCommitment = `-- name: DeleteLocalCommitment :execresult
DELETE FROM local_commitment
WHERE funding_txid = $1
  AND funding_output_index = $2
  AND commitment_height = $3
`

type DeleteLocalCommitmentParams struct {
	FundingTxid        []byte
	FundingOutputIndex int32
	CommitmentHeight   int64
}

func (q *Queries) DeleteLocalCommitment(ctx context.Context, arg DeleteLocalCommitmentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteLocalCommitment, arg.FundingTxid, arg.FundingOutputIndex, arg.CommitmentHeight)
}

const getLatestLocalCommitment = `-- name: GetLatestLocalCommitment :one
SELECT id, commitment_tx_package, funding_txid, funding_output_index, commitment_height, created_at
FROM local_commitment
WHERE funding_txid = $1
  AND funding_output_index = $2
ORDER BY commitment_height DESC
    LIMIT 1
`

type GetLatestLocalCommitmentParams struct {
	FundingTxid        []byte
	FundingOutputIndex int32
}

func (q *Queries) GetLatestLocalCommitment(ctx context.Context, arg GetLatestLocalCommitmentParams) (LocalCommitment, error) {
	row := q.db.QueryRowContext(ctx, getLatestLocalCommitment, arg.FundingTxid, arg.FundingOutputIndex)
	var i LocalCommitment
	err := row.Scan(
		&i.ID,
		&i.CommitmentTxPackage,
		&i.FundingTxid,
		&i.FundingOutputIndex,
		&i.CommitmentHeight,
		&i.CreatedAt,
	)
	return i, err
}

const insertLocalCommitment = `-- name: InsertLocalCommitment :one
INSERT INTO local_commitment (
   commitment_tx_package, funding_txid, funding_output_index,
    commitment_height, created_at
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id
`

type InsertLocalCommitmentParams struct {
	CommitmentTxPackage []byte
	FundingTxid         []byte
	FundingOutputIndex  int32
	CommitmentHeight    int64
	CreatedAt           time.Time
}

func (q *Queries) InsertLocalCommitment(ctx context.Context, arg InsertLocalCommitmentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertLocalCommitment,
		arg.CommitmentTxPackage,
		arg.FundingTxid,
		arg.FundingOutputIndex,
		arg.CommitmentHeight,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
