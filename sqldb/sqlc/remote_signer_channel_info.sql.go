// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: remote_signer_channel_info.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteChannelInfo = `-- name: DeleteChannelInfo :execresult
DELETE FROM channel_info
WHERE txid_bytes = $1
  AND output_index = $2
`

type DeleteChannelInfoParams struct {
	TxidBytes   []byte
	OutputIndex int32
}

func (q *Queries) DeleteChannelInfo(ctx context.Context, arg DeleteChannelInfoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChannelInfo, arg.TxidBytes, arg.OutputIndex)
}

const getChannelInfo = `-- name: GetChannelInfo :one
SELECT id, txid_bytes, txid_str, output_index, channel_type, is_local_initiator, local_channel_config_id, remote_channel_config_id, created_at
FROM channel_info
WHERE txid_bytes = $1
  AND output_index = $2
`

type GetChannelInfoParams struct {
	TxidBytes   []byte
	OutputIndex int32
}

func (q *Queries) GetChannelInfo(ctx context.Context, arg GetChannelInfoParams) (ChannelInfo, error) {
	row := q.db.QueryRowContext(ctx, getChannelInfo, arg.TxidBytes, arg.OutputIndex)
	var i ChannelInfo
	err := row.Scan(
		&i.ID,
		&i.TxidBytes,
		&i.TxidStr,
		&i.OutputIndex,
		&i.ChannelType,
		&i.IsLocalInitiator,
		&i.LocalChannelConfigID,
		&i.RemoteChannelConfigID,
		&i.CreatedAt,
	)
	return i, err
}

const getChannelInfoWithConfigs = `-- name: GetChannelInfoWithConfigs :one
SELECT
    ci.id AS channel_info_id,
    ci.txid_bytes,
    ci.txid_str,
    ci.output_index,
    ci.channel_type,
    ci.is_local_initiator,
    ci.created_at,

    -- Local ChannelConfig columns:
    lcc.id AS local_channel_config_id,
    lcc.chan_reserve_sat AS local_chan_reserve_sat,
    lcc.max_pending_amt_msat AS local_max_pending_amt_msat,
    lcc.min_htlc AS local_min_htlc,
    lcc.max_accepted_htlcs AS local_max_accepted_htlcs,
    lcc.dust_limit AS local_dust_limit,
    lcc.csv_delay AS local_csv_delay,
    lms.id AS local_multi_sig_key_id,
    lms.raw_key_bytes AS local_multi_sig_raw_key_bytes,
    lms.key_family AS local_multi_sig_key_family,
    lms.key_index AS local_multi_sig_key_index,
    lrev.id AS local_revocation_base_point_id,
    lrev.raw_key_bytes AS local_revocation_raw_key_bytes,
    lrev.key_family AS local_revocation_key_family,
    lrev.key_index AS local_revocation_key_index,
    lpay.id AS local_payment_base_point_id,
    lpay.raw_key_bytes AS local_payment_raw_key_bytes,
    lpay.key_family AS local_payment_key_family,
    lpay.key_index AS local_payment_key_index,
    ldel.id AS local_delay_base_point_id,
    ldel.raw_key_bytes AS local_delay_base_point_raw,
    ldel.key_family AS local_delay_base_point_key_family,
    ldel.key_index AS local_delay_base_point_key_index,
    lhtlc.id AS local_htlc_base_point_id,
    lhtlc.raw_key_bytes AS local_htlc_base_point_raw,
    lhtlc.key_family AS local_htlc_base_point_key_family,
    lhtlc.key_index AS local_htlc_base_point_key_index,

    -- Remote ChannelConfig columns:
    rcc.id AS remote_channel_config_id,
    rcc.chan_reserve_sat AS remote_chan_reserve_sat,
    rcc.max_pending_amt_msat AS remote_max_pending_amt_msat,
    rcc.min_htlc AS remote_min_htlc,
    rcc.max_accepted_htlcs AS remote_max_accepted_htlcs,
    rcc.dust_limit AS remote_dust_limit,
    rcc.csv_delay AS remote_csv_delay,
    rms.id AS remote_multi_sig_key_id,
    rms.raw_key_bytes AS remote_multi_sig_raw_key_bytes,
    rms.key_family AS remote_multi_sig_key_family,
    rms.key_index AS remote_multi_sig_key_index,
    rrev.id AS remote_revocation_base_point_id,
    rrev.raw_key_bytes AS remote_revocation_raw_key_bytes,
    rrev.key_family AS remote_revocation_key_family,
    rrev.key_index AS remote_revocation_key_index,
    rpay.id AS remote_payment_base_point_id,
    rpay.raw_key_bytes AS remote_payment_base_point_raw,
    rpay.key_family AS remote_payment_key_family,
    rpay.key_index AS remote_payment_key_index,
    rdel.id AS remote_delay_base_point_id,
    rdel.raw_key_bytes AS remote_delay_base_point_raw,
    rdel.key_family AS remote_delay_base_point_key_family,
    rdel.key_index AS remote_delay_base_point_key_index,
    rhtlc.id AS remote_htlc_base_point_id,
    rhtlc.raw_key_bytes AS remote_htlc_base_point_raw,
    rhtlc.key_family AS remote_htlc_base_point_key_family,
    rhtlc.key_index AS remote_htlc_base_point_key_index
FROM channel_info ci
         JOIN channel_config lcc ON lcc.id = ci.local_channel_config_id
         JOIN key_descriptor lms ON lms.id = lcc.multi_sig_key_id
         JOIN key_descriptor lrev ON lrev.id = lcc.revocation_base_point_id
         JOIN key_descriptor lpay ON lpay.id = lcc.payment_base_point_id
         JOIN key_descriptor ldel ON ldel.id = lcc.delay_base_point_id
         JOIN key_descriptor lhtlc ON lhtlc.id = lcc.htlc_base_point_id
         JOIN channel_config rcc ON rcc.id = ci.remote_channel_config_id
         JOIN key_descriptor rms ON rms.id = rcc.multi_sig_key_id
         JOIN key_descriptor rrev ON rrev.id = rcc.revocation_base_point_id
         JOIN key_descriptor rpay ON rpay.id = rcc.payment_base_point_id
         JOIN key_descriptor rdel ON rdel.id = rcc.delay_base_point_id
         JOIN key_descriptor rhtlc ON rhtlc.id = rcc.htlc_base_point_id
WHERE ci.txid_bytes = $1
  AND ci.output_index = $2
`

type GetChannelInfoWithConfigsParams struct {
	TxidBytes   []byte
	OutputIndex int32
}

type GetChannelInfoWithConfigsRow struct {
	ChannelInfoID                 int64
	TxidBytes                     []byte
	TxidStr                       string
	OutputIndex                   int32
	ChannelType                   int64
	IsLocalInitiator              bool
	CreatedAt                     time.Time
	LocalChannelConfigID          int64
	LocalChanReserveSat           int64
	LocalMaxPendingAmtMsat        int64
	LocalMinHtlc                  int64
	LocalMaxAcceptedHtlcs         int32
	LocalDustLimit                int64
	LocalCsvDelay                 int32
	LocalMultiSigKeyID            int64
	LocalMultiSigRawKeyBytes      []byte
	LocalMultiSigKeyFamily        int32
	LocalMultiSigKeyIndex         int32
	LocalRevocationBasePointID    int64
	LocalRevocationRawKeyBytes    []byte
	LocalRevocationKeyFamily      int32
	LocalRevocationKeyIndex       int32
	LocalPaymentBasePointID       int64
	LocalPaymentRawKeyBytes       []byte
	LocalPaymentKeyFamily         int32
	LocalPaymentKeyIndex          int32
	LocalDelayBasePointID         int64
	LocalDelayBasePointRaw        []byte
	LocalDelayBasePointKeyFamily  int32
	LocalDelayBasePointKeyIndex   int32
	LocalHtlcBasePointID          int64
	LocalHtlcBasePointRaw         []byte
	LocalHtlcBasePointKeyFamily   int32
	LocalHtlcBasePointKeyIndex    int32
	RemoteChannelConfigID         int64
	RemoteChanReserveSat          int64
	RemoteMaxPendingAmtMsat       int64
	RemoteMinHtlc                 int64
	RemoteMaxAcceptedHtlcs        int32
	RemoteDustLimit               int64
	RemoteCsvDelay                int32
	RemoteMultiSigKeyID           int64
	RemoteMultiSigRawKeyBytes     []byte
	RemoteMultiSigKeyFamily       int32
	RemoteMultiSigKeyIndex        int32
	RemoteRevocationBasePointID   int64
	RemoteRevocationRawKeyBytes   []byte
	RemoteRevocationKeyFamily     int32
	RemoteRevocationKeyIndex      int32
	RemotePaymentBasePointID      int64
	RemotePaymentBasePointRaw     []byte
	RemotePaymentKeyFamily        int32
	RemotePaymentKeyIndex         int32
	RemoteDelayBasePointID        int64
	RemoteDelayBasePointRaw       []byte
	RemoteDelayBasePointKeyFamily int32
	RemoteDelayBasePointKeyIndex  int32
	RemoteHtlcBasePointID         int64
	RemoteHtlcBasePointRaw        []byte
	RemoteHtlcBasePointKeyFamily  int32
	RemoteHtlcBasePointKeyIndex   int32
}

func (q *Queries) GetChannelInfoWithConfigs(ctx context.Context, arg GetChannelInfoWithConfigsParams) (GetChannelInfoWithConfigsRow, error) {
	row := q.db.QueryRowContext(ctx, getChannelInfoWithConfigs, arg.TxidBytes, arg.OutputIndex)
	var i GetChannelInfoWithConfigsRow
	err := row.Scan(
		&i.ChannelInfoID,
		&i.TxidBytes,
		&i.TxidStr,
		&i.OutputIndex,
		&i.ChannelType,
		&i.IsLocalInitiator,
		&i.CreatedAt,
		&i.LocalChannelConfigID,
		&i.LocalChanReserveSat,
		&i.LocalMaxPendingAmtMsat,
		&i.LocalMinHtlc,
		&i.LocalMaxAcceptedHtlcs,
		&i.LocalDustLimit,
		&i.LocalCsvDelay,
		&i.LocalMultiSigKeyID,
		&i.LocalMultiSigRawKeyBytes,
		&i.LocalMultiSigKeyFamily,
		&i.LocalMultiSigKeyIndex,
		&i.LocalRevocationBasePointID,
		&i.LocalRevocationRawKeyBytes,
		&i.LocalRevocationKeyFamily,
		&i.LocalRevocationKeyIndex,
		&i.LocalPaymentBasePointID,
		&i.LocalPaymentRawKeyBytes,
		&i.LocalPaymentKeyFamily,
		&i.LocalPaymentKeyIndex,
		&i.LocalDelayBasePointID,
		&i.LocalDelayBasePointRaw,
		&i.LocalDelayBasePointKeyFamily,
		&i.LocalDelayBasePointKeyIndex,
		&i.LocalHtlcBasePointID,
		&i.LocalHtlcBasePointRaw,
		&i.LocalHtlcBasePointKeyFamily,
		&i.LocalHtlcBasePointKeyIndex,
		&i.RemoteChannelConfigID,
		&i.RemoteChanReserveSat,
		&i.RemoteMaxPendingAmtMsat,
		&i.RemoteMinHtlc,
		&i.RemoteMaxAcceptedHtlcs,
		&i.RemoteDustLimit,
		&i.RemoteCsvDelay,
		&i.RemoteMultiSigKeyID,
		&i.RemoteMultiSigRawKeyBytes,
		&i.RemoteMultiSigKeyFamily,
		&i.RemoteMultiSigKeyIndex,
		&i.RemoteRevocationBasePointID,
		&i.RemoteRevocationRawKeyBytes,
		&i.RemoteRevocationKeyFamily,
		&i.RemoteRevocationKeyIndex,
		&i.RemotePaymentBasePointID,
		&i.RemotePaymentBasePointRaw,
		&i.RemotePaymentKeyFamily,
		&i.RemotePaymentKeyIndex,
		&i.RemoteDelayBasePointID,
		&i.RemoteDelayBasePointRaw,
		&i.RemoteDelayBasePointKeyFamily,
		&i.RemoteDelayBasePointKeyIndex,
		&i.RemoteHtlcBasePointID,
		&i.RemoteHtlcBasePointRaw,
		&i.RemoteHtlcBasePointKeyFamily,
		&i.RemoteHtlcBasePointKeyIndex,
	)
	return i, err
}

const insertChannelConfig = `-- name: InsertChannelConfig :one
INSERT INTO channel_config (
    chan_reserve_sat, max_pending_amt_msat, min_htlc, max_accepted_htlcs,
    dust_limit, csv_delay,
    multi_sig_key_id, revocation_base_point_id, payment_base_point_id,
    delay_base_point_id, htlc_base_point_id
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         ) RETURNING id
`

type InsertChannelConfigParams struct {
	ChanReserveSat        int64
	MaxPendingAmtMsat     int64
	MinHtlc               int64
	MaxAcceptedHtlcs      int32
	DustLimit             int64
	CsvDelay              int32
	MultiSigKeyID         int64
	RevocationBasePointID int64
	PaymentBasePointID    int64
	DelayBasePointID      int64
	HtlcBasePointID       int64
}

func (q *Queries) InsertChannelConfig(ctx context.Context, arg InsertChannelConfigParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertChannelConfig,
		arg.ChanReserveSat,
		arg.MaxPendingAmtMsat,
		arg.MinHtlc,
		arg.MaxAcceptedHtlcs,
		arg.DustLimit,
		arg.CsvDelay,
		arg.MultiSigKeyID,
		arg.RevocationBasePointID,
		arg.PaymentBasePointID,
		arg.DelayBasePointID,
		arg.HtlcBasePointID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertChannelInfo = `-- name: InsertChannelInfo :one
INSERT INTO channel_info (
    txid_bytes, txid_str, output_index, channel_type,
    is_local_initiator, local_channel_config_id, remote_channel_config_id, created_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         ) RETURNING id
`

type InsertChannelInfoParams struct {
	TxidBytes             []byte
	TxidStr               string
	OutputIndex           int32
	ChannelType           int64
	IsLocalInitiator      bool
	LocalChannelConfigID  int64
	RemoteChannelConfigID int64
	CreatedAt             time.Time
}

func (q *Queries) InsertChannelInfo(ctx context.Context, arg InsertChannelInfoParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertChannelInfo,
		arg.TxidBytes,
		arg.TxidStr,
		arg.OutputIndex,
		arg.ChannelType,
		arg.IsLocalInitiator,
		arg.LocalChannelConfigID,
		arg.RemoteChannelConfigID,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertKeyDescriptor = `-- name: InsertKeyDescriptor :one
INSERT INTO key_descriptor (
    raw_key_bytes, key_family, key_index
) VALUES (
             $1, $2, $3
         ) RETURNING id
`

type InsertKeyDescriptorParams struct {
	RawKeyBytes []byte
	KeyFamily   int32
	KeyIndex    int32
}

func (q *Queries) InsertKeyDescriptor(ctx context.Context, arg InsertKeyDescriptorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertKeyDescriptor, arg.RawKeyBytes, arg.KeyFamily, arg.KeyIndex)
	var id int64
	err := row.Scan(&id)
	return id, err
}
