// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment_hash_whitelist.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteWhitelistedPaymentHash = `-- name: DeleteWhitelistedPaymentHash :execresult
DELETE
FROM payment_hash_whitelist
WHERE payment_hash = $1
`

func (q *Queries) DeleteWhitelistedPaymentHash(ctx context.Context, paymentHash []byte) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteWhitelistedPaymentHash, paymentHash)
}

const getWhitelistedPaymentHash = `-- name: GetWhitelistedPaymentHash :one
SELECT id, payment_hash, amount_msat, created_at
FROM payment_hash_whitelist
WHERE payment_hash = $1
`

func (q *Queries) GetWhitelistedPaymentHash(ctx context.Context, paymentHash []byte) (PaymentHashWhitelist, error) {
	row := q.db.QueryRowContext(ctx, getWhitelistedPaymentHash, paymentHash)
	var i PaymentHashWhitelist
	err := row.Scan(
		&i.ID,
		&i.PaymentHash,
		&i.AmountMsat,
		&i.CreatedAt,
	)
	return i, err
}

const insertWhitelistedPaymentHash = `-- name: InsertWhitelistedPaymentHash :one
INSERT INTO payment_hash_whitelist (
    payment_hash, amount_msat, created_at
) VALUES (
    $1, $2, $3
) RETURNING id
`

type InsertWhitelistedPaymentHashParams struct {
	PaymentHash []byte
	AmountMsat  int64
	CreatedAt   time.Time
}

func (q *Queries) InsertWhitelistedPaymentHash(ctx context.Context, arg InsertWhitelistedPaymentHashParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertWhitelistedPaymentHash, arg.PaymentHash, arg.AmountMsat, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listWhitelistedPaymentHashes = `-- name: ListWhitelistedPaymentHashes :many
SELECT id, payment_hash, amount_msat, created_at
FROM payment_hash_whitelist
`

func (q *Queries) ListWhitelistedPaymentHashes(ctx context.Context) ([]PaymentHashWhitelist, error) {
	rows, err := q.db.QueryContext(ctx, listWhitelistedPaymentHashes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentHashWhitelist
	for rows.Next() {
		var i PaymentHashWhitelist
		if err := rows.Scan(
			&i.ID,
			&i.PaymentHash,
			&i.AmountMsat,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
